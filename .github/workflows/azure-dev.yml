name: Azure Dev

on:
  workflow_dispatch:
  push:
    branches:
    - main
    paths-ignore:
    - '.github/**'

permissions:
  id-token: write
  contents: write

jobs:
  build-test-deploy:

    runs-on: ubuntu-latest

    env:
      AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      AZURE_ENV_NAME: ${{ vars.AZURE_ENV_NAME }}
      AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}
      AZURE_OPENAI_KEYS: ${{ secrets.AZURE_OPENAI_KEYS }}
      AZURE_KEYVAULT_URI: ${{ secrets.AZURE_KEYVAULT_URI }}
      AZURE_KEYVAULT_SECRET_NAME: ${{ vars.AZURE_KEYVAULT_SECRET_NAME }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.x

    - name: Install local certs
      shell: pwsh
      run: |
        dotnet tool update -g linux-dev-certs
        dotnet linux-dev-certs install

    - name: Install Aspire workload
      shell: pwsh
      run: |
        dotnet workload update
        dotnet workload install aspire

    - name: Update appsettings.json for API app
      shell: pwsh
      run: |
        $appsettings = Get-Content -Path "./src/AzureOpenAIProxy.ApiApp/appsettings.json" -Raw | ConvertFrom-Json
        $appsettings.Azure.OpenAI.Instances = @()
        $appsettings.Azure.KeyVault.VaultUri = "${{ env.AZURE_KEYVAULT_URI }}"
        $appsettings.Azure.KeyVault.SecretName = "${{ env.AZURE_KEYVAULT_SECRET_NAME }}"
        $appsettings | ConvertTo-Json -Depth 100 | Set-Content -Path "./src/AzureOpenAIProxy.ApiApp/appsettings.json" -Encoding UTF8 -Force
        
    - name: Install Spectral Cli
      shell: bash
      run: |
        curl -L https://raw.github.com/stoplightio/spectral/master/scripts/install.sh | sh

    - name: Restore NuGet packages
      shell: bash
      run: |
        dotnet restore

    - name: Build solution
      shell: bash
      run: |
        dotnet build -c Release

    - name: Create openapi.json
      shell: pwsh
      run: |
        $fileContent = Get-Content './src/AzureOpenAIProxy.ApiApp/Constants.cs'
        $API_VERSION = [regex]::Match($fileContent, 'public const string Version = "([^"]+)"').Groups[1].Value

        $PROCESS = Start-Process -FilePath "dotnet" -ArgumentList "run --project src/AzureOpenAIProxy.AppHost" -PassThru

        Start-Sleep -Seconds 30

        Remove-Item -Path "openapi.json" -Force

        Invoke-WebRequest -Uri "https://localhost:7001/swagger/$API_VERSION/swagger.json" -OutFile "openapi.json"

        $PROCESS.Kill()

    - name: Lint OpenAPI doc
      shell: pwsh
      run: |
        $LINT_RESULT = spectral lint -f json -F warn -D openapi.json

        if( $LINT_RESULT.Count -ge 1) {
          $LINT_RESULT
          exit 1
        }

    - name: Test solution

    - name: Install playwright
      shell: pwsh
      run: |
        $playwright = Get-ChildItem -File Microsoft.Playwright.dll -Path . -Recurse
        $installer = "$($playwright[0].Directory.FullName)/playwright.ps1"
        & "$installer" install

    - name: Run unit tests
      shell: bash
      run: |
        dotnet test ./test/AzureOpenAIProxy.AppHost.Tests -c Release --no-build --logger "trx" --collect:"XPlat Code Coverage"
        dotnet test ./test/AzureOpenAIProxy.ApiApp.Tests -c Release --no-build --logger "trx" --collect:"XPlat Code Coverage"

    - name: Run integration tests
      shell: bash
      run: |
        dotnet run --project ./src/AzureOpenAIProxy.AppHost &

        DOTNET_PID=$!

        sleep 30

        dotnet test ./test/AzureOpenAIProxy.PlaygroundApp.Tests -c Release --no-build --logger "trx" --collect:"XPlat Code Coverage"

        kill $DOTNET_PID

    - name: Publish test results
      uses: bibipkins/dotnet-test-reporter@main
      with:
        github-token: ${{ secrets.GH_PAT_GRAINED }}
        results-path: ./**/TestResults/**/*.trx
        # coverage-path: ./**/TestResults/**/*.xml
        # coverage-type: cobertura
        # coverage-threshold: 0
        # coverage-threshold: 80
        allow-failed-tests: true
        post-new-comment: false
        
    - name: Install azd
      uses: Azure/setup-azd@v1.0.0

    - name: Log in with Azure (Federated Credentials)
      if: env.AZURE_CLIENT_ID != ''
      run: |
        azd auth login `
          --client-id "$Env:AZURE_CLIENT_ID" `
          --federated-credential-provider "github" `
          --tenant-id "$Env:AZURE_TENANT_ID"
      shell: pwsh

    - name: Provision Infrastructure
      run: azd provision --no-prompt
      env:
        AZD_INITIAL_ENVIRONMENT_CONFIG: ${{ secrets.AZD_INITIAL_ENVIRONMENT_CONFIG }}

    - name: Deploy Application
      run: azd deploy --no-prompt
