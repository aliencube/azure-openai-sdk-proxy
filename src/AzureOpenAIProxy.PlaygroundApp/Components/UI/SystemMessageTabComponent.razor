<FluentLayout Id="@Id" Style="margin: 10px;">
    <FluentToolbar id="system-message-tab-toolbar" Style="display: flex; align-items: center; padding-bottom: 10px; background-color: white;">
        <FluentButton id="system-message-tab-apply-button" @onclick="OnApplyChanges" Disabled="@(!isApplyButtonEnabled)"
            IconStart="@(new Icons.Filled.Size20.ArrowSwap())" Appearance="Appearance.Stealth">
            Apply changes
        </FluentButton>
        <FluentButton id="system-message-tab-reset-button" @onclick="OnResetToDefault" Disabled="@(!isResetButtonEnabled)"
            IconStart="@(new Icons.Filled.Size20.ArrowReset())" Appearance="Appearance.Stealth">
            Reset to default
        </FluentButton>
    </FluentToolbar>

    <div style="display: flex; align-items: center; margin-bottom: 5px;">
        <label id="system-message-tab-label" for="system-message-tab-textarea" style="margin-right: 5px;">System message</label>
        <FluentIcon Value="@(new Icons.Regular.Size16.Info())" Color="@Color.Info" />
    </div>
    <FluentTextArea id="system-message-tab-textarea" Rows="5" Style="width: 100%;" Value="@userSystemMessage" @oninput="OnInputChanged" Resize="TextAreaResize.Vertical"></FluentTextArea>
</FluentLayout>

@code {
    private string? userSystemMessage;
    private string? changedSystemMessage;
    private string? defaultSystemMessage = "You are an AI assistant that helps people find information.";
    private bool isApplyButtonEnabled;
    private bool isResetButtonEnabled;

    [Parameter]
    public string? Id { get; set; }

    [Parameter]
    public EventCallback<string> OnSystemMessageChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {
        userSystemMessage = defaultSystemMessage;
        await OnSystemMessageChanged.InvokeAsync(userSystemMessage);
    }

    private async Task OnInputChanged(ChangeEventArgs e)
    {
        changedSystemMessage = e.Value!.ToString();
        isApplyButtonEnabled = true;
        isResetButtonEnabled = true;
        await Task.CompletedTask;
    }

    private async Task OnApplyChanges()
    {
        userSystemMessage = changedSystemMessage;
        isApplyButtonEnabled = false;
        if(userSystemMessage == defaultSystemMessage)
        {
            isResetButtonEnabled = false;
        }
        await OnSystemMessageChanged.InvokeAsync(userSystemMessage);
    }

    private async Task OnResetToDefault()
    {
        userSystemMessage = defaultSystemMessage;
        isApplyButtonEnabled = false;
        isResetButtonEnabled = false;
        await OnSystemMessageChanged.InvokeAsync(userSystemMessage);
    }
}