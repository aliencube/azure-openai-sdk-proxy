@using AzureOpenAIProxy.PlaygroundApp.Components.UI.Admin

<div id="evt-detail-comp">
    @if (eventDetails == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <table class="evt-detail-tbl">
            <thead>
                <tr>
                    <th>
                        <ListEventDetailsHeaderComponent Title="Event" />
                    </th>
                    <th>
                        <ListEventDetailsHeaderComponent Title="Description" />
                    </th>
                    <th>
                        <ListEventDetailsHeaderComponent Title="Start" />
                    </th>
                    <th>
                        <ListEventDetailsHeaderComponent Title="End" />
                    </th>
                    <th>
                        <ListEventDetailsHeaderComponent Title="Organizer" />
                    </th>
                    <th>
                        <ListEventDetailsHeaderComponent Title="Coorganizer" />
                    </th>
                    <th>
                        <ListEventDetailsHeaderComponent Title="MaxToken" />
                    </th>
                    <th>
                        <ListEventDetailsHeaderComponent Title="DailyRequest" />
                    </th>
                    <th>
                        <ListEventDetailsHeaderComponent Title="Active" />
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var eventDetail in eventDetails)
                {
                    <tr class="evt-detail-tr">
                        <td>
                            <EventDetailElemComponent MainText="@eventDetail.Title" SubText="@eventDetail.EventId" />
                        </td>
                        <td>
                            <EventDetailElemComponent MainText="@eventDetail.Summary" SubText="@eventDetail.Description" />
                        </td>
                        <td>
                            <EventDetailElemComponent MainText="@(eventDetail.DateStart.HasValue ?
                                    eventDetail.DateStart.Value.ToString("yyyy-MM-dd") :
                                    "")" SubText="@eventDetail.TimeZone" />
                        </td>
                        <td>
                            <EventDetailElemComponent MainText="@(eventDetail.DateEnd.HasValue ?
                                    eventDetail.DateEnd.Value.ToString("yyyy-MM-dd") :
                                    "")" SubText="@eventDetail.TimeZone" />
                        </td>
                        <td>
                            <EventDetailElemComponent MainText="@eventDetail.OrganizerName"
                                SubText="@eventDetail.OrganizerEmail" />
                        </td>
                        <td>
                            <EventDetailElemComponent MainText="@eventDetail.CoorganizerName"
                                SubText="@eventDetail.CoorganizerEmail" />
                        </td>
                        <td>
                            <EventDetailElemComponent MainText="@eventDetail.MaxTokenCap.ToString()" />
                        </td>
                        <td>
                            <EventDetailElemComponent MainText="@eventDetail.DailyRequestCap.ToString()" />
                        </td>
                        <td>
                            <EventDetailElemActiveComponent
                                IsActive="@(eventDetail.IsActive.HasValue ? eventDetail.IsActive.Value : false)" />
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

<style>
    .evt-detail-tbl {
        width: 100%;
        height: 100%;
    }
</style>

@code {
    private AdminEventDetails[]? eventDetails;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(100);

        var startDate = DateOnly.FromDateTime(DateTime.Now);

        // make dummy data
        eventDetails = Enumerable.Range(1, 10).Select(index => new AdminEventDetails
            {
                EventId = Guid.NewGuid().ToString(),
                Title = $"event title #{index}",
                Summary = "dummy summary",
                Description = "dummy description",
                DateStart = DateTimeOffset.Now,
                DateEnd = DateTimeOffset.Now.AddDays(7 + index),
                TimeZone = "KST",
                IsActive = index % 2 == 0,
                OrganizerName = $"Charlie_{index}",
                OrganizerEmail = $"user_{index}@gmail.com",
                CoorganizerName = $"Bravo_{index}",
                CoorganizerEmail = $"support_{index}@gmail.com",
                MaxTokenCap = (100 + index) * 100,
                DailyRequestCap = index * 10
            }).ToArray();
    }

    // AdminEventDetails - declared in AzureOpenAIProxy.ApiApp.Models
    private class AdminEventDetails
    {
        /// <summary>
        /// Gets or sets the event id.
        /// </summary>
        public required string? EventId { get; set; }

        /// <summary>
        /// Gets or sets the event title name.
        /// </summary>
        public required string? Title { get; set; }

        /// <summary>
        /// Gets or sets the event summary.
        /// </summary>
        public required string? Summary { get; set; }

        /// <summary>
        /// Gets or sets the event description.
        /// </summary>
        public string? Description { get; set; }

        /// <summary>
        /// Gets or sets the event start date.
        /// </summary>
        public required DateTimeOffset? DateStart { get; set; }

        /// <summary>
        /// Gets or sets the event end date.
        /// </summary>
        public required DateTimeOffset? DateEnd { get; set; }

        /// <summary>
        /// Gets or sets the event start to end date timezone.
        /// </summary>
        public required string? TimeZone { get; set; }

        /// <summary>
        /// Gets or sets the event active status.
        /// </summary>
        public required bool? IsActive { get; set; }

        /// <summary>
        /// Gets or sets the event organizer name.
        /// </summary>
        public required string? OrganizerName { get; set; }

        /// <summary>
        /// Gets or sets the event organizer email.
        /// </summary>
        public required string? OrganizerEmail { get; set; }

        /// <summary>
        /// Gets or sets the event coorganizer name.
        /// </summary>
        public string? CoorganizerName { get; set; }

        /// <summary>
        /// Gets or sets the event coorganizer email.
        /// </summary>
        public string? CoorganizerEmail { get; set; }

        /// <summary>
        /// Gets or sets the Azure OpenAI Service request max token capacity.
        /// </summary>
        public required int? MaxTokenCap { get; set; }

        /// <summary>
        /// Gets or sets the Azure OpenAI Service daily request capacity.
        /// </summary>
        public required int? DailyRequestCap { get; set; }
    }
}
