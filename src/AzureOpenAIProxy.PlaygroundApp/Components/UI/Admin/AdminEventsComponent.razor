@using AzureOpenAIProxy.PlaygroundApp.Models

@inject NavigationManager NavigationManager

<FluentLayout Id="@Id">
    @if (eventDetails == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div id="admin-events-table">
            <FluentDataGrid  Items="@eventDetails" Pagination="@pagination" >
                <PropertyColumn Class="fluent-datagrid-cell" Property="@(p => p.Title)" Align="@Align.Center" Sortable="true" />
                <PropertyColumn Class="fluent-datagrid-cell" Property="@(p => p.DateStart)" Format="yyyy-MM-dd" Align="@Align.Center" Sortable="true" />
                <PropertyColumn Class="fluent-datagrid-cell" Property="@(p => p.DateEnd)" Format="yyyy-MM-dd" Align="@Align.Center" Sortable="true" />
                <PropertyColumn Class="fluent-datagrid-cell" Property="@(p => p.TimeZone)" Align="@Align.Center" Sortable="true" />
                <PropertyColumn Class="fluent-datagrid-cell" Property="@(p => p.OrganizerName)" Align="@Align.Center" Sortable="true" />
                <PropertyColumn Class="fluent-datagrid-cell" Property="@(p => p.CoorganizerName)" Align="@Align.Center" Sortable="true" />
                <PropertyColumn Class="fluent-datagrid-cell" Property="@(p => p.MaxTokenCap)" Align="@Align.Center" Sortable="true" />
                <PropertyColumn Class="fluent-datagrid-cell" Property="@(p => p.DailyRequestCap)" Align="@Align.Center" Sortable="true" />
                <TemplateColumn Class="fluent-datagrid-cell" Title="Active" Align="@Align.Center">
                    <AdminEventIsActiveComponent IsActive="@(((AdminEventDetails)@context).IsActive)" />
                </TemplateColumn>
                <TemplateColumn Class="fluent-datagrid-cell" Title="Actions" Align="@Align.Center">
                    <FluentButton aria-label="Edit item" IconEnd="@(new Icons.Regular.Size16.Edit())" @onclick="@(() => NavigateToEdit(((AdminEventDetails)@context).EventId))" />
                    <FluentButton aria-label="Delete item" IconEnd="@(new Icons.Regular.Size16.Delete())" />
                </TemplateColumn>
            </FluentDataGrid>
        </div>

        <div class="page-button-box">
        @if (pagination.TotalItemCount.HasValue)
            {
                for (var pageIndex = 0; pageIndex <= pagination.LastPageIndex; pageIndex++)
                {
                    var capturedIndex = pageIndex;
                    <FluentButton class="page-button" @onclick="@(() => GoToPageAsync(capturedIndex))" Appearance="@PageButtonAppearance(capturedIndex)"
                        aria-current="@AriaCurrentValue(capturedIndex)">
                        @(capturedIndex + 1)
                    </FluentButton>
                }
            }
        </div>
    }
</FluentLayout>

@code {
    private IQueryable<AdminEventDetails>? eventDetails;
    private PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    [Parameter]
    public string? Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(100);

        var startDate = DateOnly.FromDateTime(DateTime.Now);

        // make dummy data
        eventDetails = Enumerable.Range(1, 150).Select(index => new AdminEventDetails
            {
                EventId = Guid.NewGuid(),
                Title = $"event title #{index}",
                Summary = "dummy summary",
                Description = "dummy description",
                DateStart = DateTimeOffset.Now,
                DateEnd = DateTimeOffset.Now.AddDays(7 + index),
                TimeZone = "KST",
                IsActive = index % 3 == 0,
                OrganizerName = $"Charlie_{index}",
                OrganizerEmail = $"user_{index}@gmail.com",
                CoorganizerName = $"Bravo_{index}",
                CoorganizerEmail = $"support_{index}@gmail.com",
                MaxTokenCap = (100 + index) * 100,
                DailyRequestCap = index * 10
            }).AsQueryable();

        pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
    }

    private async Task GoToPageAsync(int pageIndex)
    {
        await pagination.SetCurrentPageIndexAsync(pageIndex);
    }

    private Appearance PageButtonAppearance(int pageIndex)
    => pagination.CurrentPageIndex == pageIndex ? Appearance.Accent : Appearance.Neutral;

    private string? AriaCurrentValue(int pageIndex)
    => pagination.CurrentPageIndex == pageIndex ? "page" : null;

    private void NavigateToEdit(Guid eventId)
    {
        NavigationManager.NavigateTo("/admin/events/edit");
    }
}
