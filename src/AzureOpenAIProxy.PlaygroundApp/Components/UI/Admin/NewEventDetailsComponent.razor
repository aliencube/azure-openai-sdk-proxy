@using AzureOpenAIProxy.PlaygroundApp.Clients
@using AzureOpenAIProxy.PlaygroundApp.Models;

@using System.Globalization

@using NodaTime
@using NodaTime.Extensions
@using NodaTime.TimeZones

<FluentLayout Id="@Id">
    @if (adminEventDetails == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <FluentHeader>New Event</FluentHeader>
        <FluentBodyContent>
            <section>
                <h2>Event Infomation</h2>
            
                <FluentStack Class="create-fluent-stack" Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
                    <FluentLabel For="event-title" Class="create-input-label">Title</FluentLabel>
                    <FluentTextField Id="event-title" Name="title" TextFieldType="TextFieldType.Text" Required  />
                </FluentStack>

                <FluentStack Class="create-fluent-stack" Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
                    <FluentLabel For="event-summary" Class="create-input-label">Summary</FluentLabel>
                    <FluentTextField id="event-summary" TextFieldType="TextFieldType.Text" Required />
                </FluentStack>

                <FluentStack Class="create-fluent-stack" Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
                    <FluentLabel For="event-description" Class="create-input-label">Description</FluentLabel>
                    <FluentTextArea Id="event-description" Style="width:300px" />
                </FluentStack>

                <FluentStack Class="create-fluent-stack" Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
                    <FluentLabel For="event-start-date" Class="create-input-label">Event Start Date</FluentLabel>
                    <FluentDatePicker Id="event-start-date" Value="@adminEventDetails.DateStart.DateTime" ValueChanged="@(e => adminEventDetails.DateStart = e.Value)" Culture="System.Globalization.CultureInfo.CurrentCulture" />
                    <FluentTimePicker Id="event-start-time" Value="@adminEventDetails.DateStart.DateTime" ValueChanged="@(e => adminEventDetails.DateStart = e.Value)" />
                </FluentStack>

                <FluentStack Class="create-fluent-stack" Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
                    <FluentLabel For="event-end-date" Class="create-input-label">Event End Date</FluentLabel>
                    <FluentDatePicker Id="event-end-date" Value="@adminEventDetails.DateEnd.DateTime" ValueChanged="@(e => adminEventDetails.DateEnd = e.Value)" Culture="System.Globalization.CultureInfo.CurrentCulture" />
                    <FluentTimePicker Id="event-end-time" Value="@adminEventDetails.DateEnd.DateTime" ValueChanged="@(e => adminEventDetails.DateEnd = e.Value)" />
                </FluentStack>

                <FluentStack Class="create-fluent-stack" Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
                    <FluentLabel For="event-timezone" Class="create-input-label">Time Zone</FluentLabel>
                    <FluentSelect Id="event-timezone" @bind-Value="@adminEventDetails.TimeZone" Height="500px" TOption="string" Required>
                        @foreach (var timeZone in timeZoneList)
                        {
                            <FluentOption Value="@timeZone.Id">@timeZone.Id</FluentOption>
                        }
                    </FluentSelect>
                </FluentStack>
            </section>

            <section>
                <h2>Event Organizer</h2>

                <FluentStack Class="create-fluent-stack" Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
                    <FluentLabel For="event-organizer-name" Class="create-input-label">Organizer Name</FluentLabel>
                    <FluentTextField Id="event-organizer-name" TextFieldType="TextFieldType.Text" Required />
                </FluentStack>


                <FluentStack Class="create-fluent-stack" Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
                    <FluentLabel For="event-organizer-email" Class="create-input-label">Organizer Email</FluentLabel>
                    <FluentTextField Id="event-organizer-email" TextFieldType="TextFieldType.Email" Required />
                </FluentStack>
            </section>
        
            <section>
                <h2>Event Coorganizers</h2>

                <FluentStack Class="create-fluent-stack" Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
                    <FluentLabel For="event-coorgnizer-name" Class="create-input-label">Coorgnizer Name</FluentLabel>
                    <FluentTextField Id="event-coorgnizer-name" TextFieldType="TextFieldType.Text" Required />
                </FluentStack>

                <FluentStack Class="create-fluent-stack" Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
                    <FluentLabel For="event-coorgnizer-email" Class="create-input-label">Coorgnizer Email</FluentLabel>
                    <FluentTextField Id="event-coorgnizer-email" TextFieldType="TextFieldType.Email" Required />
                </FluentStack>
            </section>

            <section>
                <h2>Event Configuration</h2>

                <FluentStack Class="create-fluent-stack" Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
                    <FluentLabel For="event-max-token-cap" Class="create-input-label">Max Token Cap</FluentLabel>
                    <FluentNumberField Id="event-max-token-cap" @bind-Value="adminEventDetails.MaxTokenCap" Required />
                </FluentStack>

                <FluentStack Class="create-fluent-stack" Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
                    <FluentLabel For="event-daily-request-cap" Class="create-input-label">Daily Request Cap</FluentLabel>
                    <FluentNumberField Id="event-daily-request-cap" @bind-Value="adminEventDetails.DailyRequestCap" Required />
                </FluentStack>
            </section>

            <section class="button-section">
                <FluentButton Id="admin-event-detail-add" Appearance="Appearance.Accent" Class="button" OnClick="AddEvent">Add Event</FluentButton>
                <FluentButton Id="admin-event-detail-cancel" Appearance="Appearance.Outline" Class="button" OnClick="CancelEvent">Cancel</FluentButton>
            </section>
        </FluentBodyContent>
    }
</FluentLayout>


@code {
    private List<DateTimeZone>? timeZoneList;
    private AdminEventDetails? adminEventDetails;
    private DateTimeOffset currentTime = DateTimeOffset.UtcNow;

    [Parameter]
    public string? Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        adminEventDetails = adminEventDetails == null ? new() : adminEventDetails;

        timeZoneList = DateTimeZoneProviders.Tzdb.GetAllZones().ToList();

        CultureInfo customCulture = (CultureInfo)CultureInfo.CurrentCulture.Clone();
        customCulture.DateTimeFormat.ShortDatePattern = "yyyy-MM-dd";
        customCulture.DateTimeFormat.ShortTimePattern = "HH:mm";

        CultureInfo.DefaultThreadCurrentCulture = customCulture;
        CultureInfo.DefaultThreadCurrentUICulture = customCulture;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var timezoneId = GetIanaTimezoneId();
            currentTime = GetCurrentDateTimeOffset(timezoneId);

            adminEventDetails.DateStart = currentTime.AddHours(1).AddMinutes(-currentTime.Minute);
            adminEventDetails.DateEnd = currentTime.AddDays(1).AddHours(1).AddMinutes(-currentTime.Minute);
            adminEventDetails.TimeZone = timezoneId;

            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task AddEvent()
    {
        await Task.CompletedTask;
    }

    private async Task CancelEvent()
    {
        await Task.CompletedTask;
    }

    private string GetIanaTimezoneId()
    {
        string timezoneId = TimeZoneInfo.Local.Id;

        if (OperatingSystem.IsWindows())
        {
            if (TimeZoneInfo.TryConvertWindowsIdToIanaId(timezoneId, out var ianaTimezoneId))
            {
                timezoneId = ianaTimezoneId;
            }
        }

        return timezoneId;
    }

    private DateTimeOffset GetCurrentDateTimeOffset(string timezoneId)
    {
        var timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById(timezoneId);

        return TimeZoneInfo.ConvertTime(DateTimeOffset.UtcNow, timeZoneInfo);
    }
}

