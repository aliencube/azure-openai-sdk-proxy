@typeparam TValue where TValue : System.Numerics.INumber<TValue>

<div id="@Id">
    <label id=@($"{Id}-label") class="parameter-component-label" for=@($"{Id}-content")>
        @LabelText

        @* Tooltip Image *@
        <FluentIcon Id=@($"{Id}-anchor") Value="@(new Icons.Regular.Size12.Info())" />
        <FluentTooltip Id=@($"{Id}-tooltip")
                       Anchor=@($"{Id}-anchor")
                       Position="TooltipPosition.End"
                       UseTooltipService="false"
                       MaxWidth="250px"
                       Style="line-break:anywhere">
            @TooltipText
        </FluentTooltip>
    </label>

    <FluentStack Id=@($"{Id}-content")
                 Orientation="Orientation.Horizontal"
                 Style="column-gap:0px">

        <FluentSlider Id=@($"{Id}-slider") Class="parameter-component-slider"
                      Min="@Min" Max="@Max" Step="@Step"
                      @bind-Value=Value @bind-Value:after=AfterSliderChange />

        <FluentTextField Id=@($"{Id}-textfield") Class="parameter-component-textfield"
                         @bind-Value=textFieldValue @bind-Value:after=AfterTextFieldChange />

    </FluentStack>

    @if (!hasNoError)
    {
        <FluentCard Class="parameter-component-error">
            @errorText
        </FluentCard>
    }
</div>

@code {
    [Parameter, EditorRequired]
    public TValue? Min { get; set; } = default;

    [Parameter, EditorRequired]
    public TValue? Max { get; set; } = default;

    [Parameter, EditorRequired]
    public TValue? Step { get; set; } = default;

    [Parameter]
    public TValue? Value { get; set; }

    [Parameter]
    public string? Id { get; set; }

    [Parameter]
    public EventCallback<TValue> ValueChanged { get; set; }

    [Parameter, EditorRequired]
    public string LabelText { get; set; } = string.Empty;

    [Parameter, EditorRequired]
    public string TooltipText { get; set; } = string.Empty;

    public string? textFieldValue { get; set; }

    private bool hasNoError = true;
    private string errorText = string.Empty;

    protected override void OnInitialized()
    {
        textFieldValue = Value!.ToString();
        errorText = $"Only numbers between {Min} and {Max} are permitted";

        base.OnInitialized();
    }

    private async Task AfterSliderChange()
    {
        hasNoError = true;
        textFieldValue = Value!.ToString();

        await ValueChanged.InvokeAsync(Value);
    }

    private async Task AfterTextFieldChange()
    {
        hasNoError = TValue.TryParse(textFieldValue, null, out var parsed);
        if (!hasNoError || parsed == null)
            return;

        hasNoError = parsed >= Min! && parsed <= Max!;
        if (!hasNoError)
            return;

        this.Value = parsed;
        await ValueChanged.InvokeAsync(Value);
    }
}
