@page "/playground"
@rendermode InteractiveServer

<PageTitle>Playground Page</PageTitle>

<FluentLayout>
    <FluentHeader Style="padding-top: 5px;"><h1>Azure OpenAI Proxy Playground</h1></FluentHeader>

    <FluentGrid Spacing="3" AdaptiveRendering="true" Justify="JustifyContent.FlexStart">
        <FluentGridItem Class="config-grid" xs="12" sm="12" md="4" lg="4" xl="4" xxl="4">
            <ConfigTabComponent @rendermode="InteractiveServer"/>
        </FluentGridItem>

        <FluentGridItem Class="chat-grid" xs="12" sm="12" md="8" lg="8" xl="8" xxl="8" Style="height: 900px;">
            <FluentStack Style="width: 100%; height: 100%;" Orientation="Orientation.Vertical" VerticalAlignment="VerticalAlignment.Bottom">
                <FluentStack Style="width: 100%;" Orientation="Orientation.Vertical" VerticalAlignment="VerticalAlignment.Top">
                    @if (this.messages != null && this.messages.Any())
                    {
                        foreach (var message in this.messages)
                        {
                            <FluentStack Style="width: 70%;" Orientation="Orientation.Horizontal" HorizontalAlignment="@(message.Role == MessageRole.Assistant ? HorizontalAlignment.Start : HorizontalAlignment.End)">
                                <FluentCard MinimalStyle="true">
                                    <p>@message.Message</p>
                                </FluentCard>
                            </FluentStack>
                        }
                    }
                </FluentStack>
                <FluentStack Style="width: 100%;" Orientation="Orientation.Vertical" VerticalAlignment="VerticalAlignment.Bottom">
                    <ChatWindowComponent Id="chat-window" OnPromptSent="SendPrompt" />
                </FluentStack>
            </FluentStack>
        </FluentGridItem>
    </FluentGrid>
</FluentLayout>

@code {
    private List<ChatMessage>? messages;

    protected override async Task OnInitializedAsync()
    {
        this.messages = [];

        await Task.CompletedTask;
    }

    private async Task SendPrompt(string prompt)
    {
        this.messages!.Add(new ChatMessage() { Role = MessageRole.User, Message = prompt });

        await Task.CompletedTask;
    }

    public class ChatMessage
    {
        public MessageRole? Role { get; set; }
        public string? Message { get; set; }
    }

    public enum MessageRole
    {
        User,
        Assistant
    }
}